/*-------------------------------------------------------
【程序设计】
---------------------------------------------------------

题目：请编写函数fun,该函数的功能是：将M行N列的二维数组中的数据,按列的顺序依次
      放到一维数组中。一维数 组中数据的个数存放在形参n所指的存储单元中。

例如：若二维数组中的数据为        
                                33 33 33 33                       
                                44 44 44 44                        
                                55 55 55 55

      则一维数组中的内容应是：33 44 55 33 44 55 33 44 55 33 44 55

注意：请勿改动main函数和其他函数中的任何内容，仅在函数fun的花括号中填入
      所编写的若干语句。

-------------------------------------------------------*/

#include <stdio.h>

void fun (int (*s)[10], int *b, int *n,int mm, int nn)
{
/**********Program**********/
	int i,j;
	for(i=0;i<nn;i++) {
		for(j=0;j<mm;j++) {
			b[*n]=s[j][i];
			(*n)++;
	 	}	
	}
/**********  End  **********/
}
int main()
{
        int w[10][10]={{33,33,33,33},{44,44,44,44},{55,55,55,55}}, i, j;
        int a[100]={0},n=0 ,s;

        printf("The matrix:\n");
        for (i=0; i<3; i++)
        {
                for (j=0;j<4;j++)  
                printf("%3d",w[i][j]);
                printf("\n");
        }
        fun(w,a,&n,3,4);
        printf("The A array:\n");
        for(s=0; s<n; s++)  
        {     
                
                printf("%3d ",a[s]);
        }
while(1);
}
/*char *s[10]表示一个有10个元素的数组,数组的元素类型是char * ;
char (*s)[10]表示一个指针，指针指向的是有10个元素的字符数组
可以发现列地址和行地址之间存在着以下关系即行地址进行一次*运算即为列地址，
同样的列地址进行一次&预算即为行地址
*(ptr+Row)+Col 为列地址，且为该数组第Row行，第Col列的地址
*(*(ptr+Row)+Col) 为具体的值
*a指向的是a[0],而不是a[0][0]
指针本身也是一个值，它的值是所指向对象的地址。指针传递参数本质上是值传递的方式，它所传递的是一个地址值。
值传递过程中，被调函数的形式参数作为被调函数的局部变量处理，即在栈中开辟了内存空间以存放由主调函数放进来的实参的值，
从而成为了实参的一个副本。值传递的特点是被调函数对形式参数的任何操作都是作为局部变量进行，
不会影响主调函数的实参变量的值。(*n = k可以而n = &k就不行) 
说到底，出现该问题的原因还是对指针的理解以及对参数传递方式的理解不够到位。*/
